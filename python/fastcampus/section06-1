# Section 06-1
# fastcampus
# ubuntu jupyter notebook 3.8.1
# 2020 01 16

# 함수 정의 방법
# def 함수명(parameter):
#     code

# 함수 호출
# 함수명(parameter)

# 함수 선언 위치 중요

# 예제1
def hello(world):
    print("Hello Jupyter notebook",world)

hello("Python!")
hello(7777) 

# # 예제2
# def hello_return(world):
#     val = "Hello " + str(world)
#     return val
# str = hello_return("Python!!!!")
# print(str)

# 예제3(다중 리턴)
def func_mul(x):
    y1 = x * 100
    y2 = x * 200
    y3 = x * 300
    return y1,y2,y3
val1,val2,val3 = func_mul(100)
print(type(val1),val1,val2,val3)

# 예제4 (리스트, 튜플 형태로 받기)

def func_mul2(x):
    y1 = x * 100
    y2 = x * 200
    y3 = x * 300
    return [y1,y2,y3]  # 튜플은 ()

lt = func_mul2(100)
print(lt,type(lt))


# 예제 4 
# *args, *kwargs 
def args_func(*args):
    print(args) 
    print(type(args)) # tuple형태
    for i,v in enumerate(args):
        print(i,v) # 튜플안의 값에 대한 순서를 나타내줌
    
args_func('kim','Park','LEE') # 튜플 형태로 가변적 몇개가 나올지 모를 경우에 *args

# kwargs
def kwargs_func(**kwargs):
    print(kwargs)
    for k, v in kwargs.items():
        print(k,v)

kwargs_func(name1='Lee',name2="Kim",name3="JU") # 딕셔너리 형태로 가변적으로 사용할 경우에 kwargs

# 전체 혼합
def example_mul(arg1, arg2, *args, **kwargs):
    print(arg1, arg2, args, kwargs)
    
example_mul(10,20)
example_mul(10,20, 'Park','Kim', age1 = 24, age2 = 22) # 이렇게 혼합해서 사용할 수 있다.


# 예제 5
# 중첩 함수(클로저) **

def nested_func(num):
    def func_in_func(num):
        print(num)
    print("in function")
    func_in_func(num + 10000)

nested_func(10000)

# 예제 6
def func_mul3(x:int) -> list:  # list 형태로 출력된다고 설명.
    y1 = x * 100
    y2 = x * 200
    y3 = x * 300
    return [y1,y2,y3]

print(func_mul3(5))

# 람다식 예제
# 람다식 : 메모리 절약, 가독성 향상, 코드 간결
# 함수는 객체 생성 -> 리소스(메모리) 할당
# 람다는 즉시 실행(Heap 초기화) -> 메모리 초기화

# 일반적 함수 -> 변수 할당
def mul_10(num : int) -> int:
    return num * 10
var_func = mul_10 # 변수에 할당
print(var_func)   # 함수의 데이터 지정 위치 출력
print(type(var_func))  # 함수는 객체라서 class function 

print(var_func(10)) # 100

lambda_mul_10 = lambda num: num *10

print(">>>", lambda_mul_10(10))

def func_final(x, y, func): # 매개변수로 함수도 받을 수 있다.
    print(x * y * func(10))

func_final(10, 10, lambda_mul_10)  # 10 = x, 10= y , lambda_mul_10 = 100

print(func_final(10,10, lambda x : x * 1000)) # 10 * 1000 = 10000 * x,y

