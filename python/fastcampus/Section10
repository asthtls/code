# Section 10
# fastcampus
# ubuntu jupyter notebook python 3.8.1
# 2020 01 18

# 예외 종류
# 문법적으로 에러가 없지만, 코드 실행(런타임)프로세스에서 발생하는 예외 처리도 중요
# linter : 코드 스타일, 문법 체크


# SyntaxError : 잘못된 문법

# 예
# print('Test)
# if True
#    pass
# x => y

# NameError : 참조 변수가  없음

a = 10
b = 15
# print(c) # name c is not defined

# ZeroDivisionError : 0 나누기 에러
# print(10/0) # division by zero

# IndexError : 인덱스 범위 오버
x = [10, 20, 30]
print(x[0])
# print(x[3])  # 예외 발생 list index out of range

# KeyError

dic = {'name': 'Lee', 'Age': 33, 'City': 'Seoul'}

# print(dic['hobby']) # 딕셔너리 안에 hobby 값이 없음
print(dic.get('hobby')) # get 메소드 활용 . 추가시에

# AttributeError : 모듈, 클래스에 있는 잘못된 속성 사용시에 예외

import time
print(time.time())
# print(time.month()) # time 모듈안에 month란 명령어가 포함되어 있지 않은 경우

# ValuError : 참조 값이 없을 때 발생
x = [1,5,9]

# x.remove(10) #list.remove(x): x not in list
# x.index(10)

# FileNotFoundError

# f = open('test.txt','r') # 예외 발생 [Errno 2] No such file or directory: 'test.txt'

# TypeError
x = [1,2]
y = (1,2)
z = 'test'

# print(x+y) # can only concatenate list (not "tuple") to list
# print(x + z) # can only concatenate list (not "str") to list
print(x + list(y)) # 예외 형 변환

# 항상 예외가 발생하지 않을 것으로 가정하고 먼저 코딩
# 그 후 런타임 예외 발생시 예외 처리 코딩 권장(EAPP 코딩 스타일)

# 예외 처리 기본
# try : 에러가 발생할 가능성이 있는 코드 실행
# except : 에러명1
# except : 에러명2
# else: 에러가 발생하지 않았을 경우 실행
# finally : 항상 실행

# 예제1

name = ['Lee','Kim','Park']

try:
    z = 'Lee' # CHO 예외 발생
    x = name.index(z)
    print(x)
    print('{} Found it! in name'.format(z, x+1))
except ValueError:
    print("Not Found it! - Occurred ValueError!") # 값에 대한 에러기 때문에 ValueError
else:
    print('OK else!') # 에러가 발생하지 않았기에 출력
    

try:
    z = 'JIN'
    x = name.index(z)
    print(x)
    print('{} Found it! in name'.format(z, x+1))
except : # 에러의 종류를 모른다면 그냥 except - 모든 에러 처리
    print("Not Found it! - Occurred ValueError!")
else:
    print('OK else!') 
finally:
    print("finally OK") # 에러가 나든 안나든 실행

# 예제 4
# 예외 처리는 하지 않지만, 무조건 수행되는 코딩 패턴
try:
    print("fsafafs")
finally:
    print()
    
# 예제 5

try:
    z = 'JIN'
    x = name.index(z)
    print(x)
    print('{} Found it! in name'.format(z, x+1))
# except : # 에러의 종류를 모른다면 그냥 except - 모든 에러 처리
#     print("Not Found it! - Occurred ValueError!")
except ValueError:
    print("ValueError")
except Exception:
    print("Exception") # 이렇게 다중 가능 하지만 에러 순서가 중요
else:
    print('OK else!') 
finally:
    print("finally OK") # 에러가 나든 안나든 실행
    
# 예제 6
# 예외 발생:raise
# raise 키워드로 예외 직접 발생
try:
    a = "LEE"
    if a =='Kim':
        print("OK 허가")
    else:
        raise ValueError # 아닌 경우 ValueError 발생하게 한다.
except ValueError:
    print("ValueError 에러 발생")
except:
    print("문제 발생")
else:
    print("Ok")
