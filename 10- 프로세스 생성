# 2020 04 03
# 시스템 프로그래밍

# 프로세스 생성



프로세스 기본 구조
-TEXT,DATA,BSS,HEAP,STACK


BSS  = int i;   == 미 초기화시 들어감
DATA = int i=0; == 초기화시 들어감
TEXT =  code
  
*BSS,DATA,TEXT는 컴파일시 결정

기본 프로세스 생성 과정
-1.TEXT,DATA,BSS,HEAP,STACK의 공간을 생성
-2.프로세스 이미지를 해당 공간에 업로드하고, 실행 시작
*1.공간 생성, 2.이미지 3. 실행

프로세스 계층: 다른 프로세스는 또다른 프로세스로부터 생성
    -부모 프로세스, 자식 프로세스
    
fork()와 exec() 시스템 콜

fork()
    -새로운 프로세스 공간을 별도로 만들고,fork() 시스템콜을 호출한 프로세스(부모 프로세스) 공간을 모두 복사
        --별도의 프로세스 공간을 만들고, 부모 프로세스 공간의 데이터를 그대로 복사
*fork = 부모 프로세스를 모두 복사.

exec() 시스템 콜
    -exec()시스템콜을 호출한 현재 프로세스 공간의 TEXT,DATA,BSS 영역을 새로운 프로세스의 이미지로 덮어씌움
        --별도의 프로세스 공간을 만들지 않음
*exec = 덮어씌움

차이점: fork는 부모 프로세스가 살아있다., exec는 덮어씌우는것이기 때문에 부모 프로세스 사라짐

fork()시스템콜
헤더 파일 <unistd.h>
함수 원형: pid_t fork(void); // 인자 x
pid_t = return

for()시스템콜
-pid=fork()가 실행되면 부모 프로세스와 동일한 자식 프로세스가 별도 메모리 공간에 생산
-자식 프로세스가 pid가 0으로 리턴, 부모 프로세스는 실제 pid 리턴
-두 프로세스의 변수 및 PC(Program Count)값은 동일
-새로운 프로세스 공간을 별도로 만들고, fork() 시스템콜을 호출한 프로세스(부모 프로세스)공간을 모두 복사한 후 , fork() 시스템콜 이후 코드부터 실행


