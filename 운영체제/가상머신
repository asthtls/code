# 2020 02 08
# 가상머신의 이해

*가상머신 (Virtual Machine)
-하나의 하드웨어(CPU,Memory등)에 다수의 운영체제를 설치하고, 개별 컴퓨터처럼 동작하도록 하는 프로그램

Virtual Machine Type1(native 또는 bare metal)
-하이퍼 바이저(또는 VMM):운영체제와 응용프로그램을 물리적 하드웨어에서 분리하는 프로세스
-하이퍼바이저 또는 버추얼 머신 모니터(VMM)라고 하는 소프트웨어가 Hardware에서 직접 구동
    --Xen,KVM
Type2
-하이퍼바이저 도는 버추얼 머신 모니터(VMM) HOst OS상위에 설치 
    --VMWare,Parallels Desktop(MAC)

Full Virtualization(전가상화) VS Half Virtualization(반가상화)
-전가상화: 각 가상머신이 하이퍼바이저를 통해서 하드웨어와 통신
    --하이퍼바이저가 마치 하드웨어인 것처럼 동작하므로, 가상머신의 OS는 자신이 가상 머신인 상태인지를 모름
*VMM이 통역사 역할을 해서 하드웨어에 전달

-반가상화: 각 가상머신에서 직접 하드웨어와 통신
    --각 가상머신에 설치되는 OS는 가상머신인 경우, 이를 인지하고, 각 명령에 하이퍼바이저 명령을 추가해서 하드웨어와 통신
*VMM은 리소스관리만 해준다.-전달자

*최근 HW 성능 개선으로 전가상화 기술을 선호

VMWare: 대중적인 가상머신 프로그램(Type2)
KVM: AWS(아마존 클라우드 컴퓨팅 서비스)등에서 사용(Type1) 100대 -> 1만명 사용 1만대로 인식하게 하기 위해서 가상머신 사용
KVM - 리눅스 커널  ioct() <- 하드웨어 직접 명령 -> CPU(intel-VT)

또 다른 가상먼신:Docker(가상 머신 vs Docker) **
-가상 머신은 컴퓨터 하드웨어를 가상화(하드웨어 전체 추상화)
    --하이퍼바이저 사용, 추가 OS 필요등 성능 저하 이슈 존재
-Docker는 운영체제 레벨에서 별도로 분리된 실행환경을 제공(커널 추상화)
    --마치 리눅스 처음 설치했을때와 유사한 실행환경을 만들어주는 리눅스 컨테이너 기술 기반
    --리눅스 컨테이너 기술이므로 macOS나 windows에 설치할 경우는 가상 머신 기반 제공
    
*VMWare는 대부분 os가능
*하지만 Docker는 리눅스가 설치되어 있어야 편함. - 기본 리눅스 환경이 준비

가상머신 정리
-Bare-Metal 방식이 가장 성능이 좋음
    --하드웨어 직접 엑세스하기 때문
    --AWS(클라우드 컴퓨팅)환경도 Bare-Metal기반 가상 머신 기술 활용(KVM)
-Docker는 경량 이미지로 실행환경을 통째로 백업, 실행 가능(실무에 많이 사용됨)
    --Data Engineering에서 Docker로 시스템 환경 설정+ 프로그램을 한번에 배포
    --예:프로그램 업데이트 -> Docker이미지 작성 -> Jenkins로 배치잡 생성 및 실행(AWS EC2 재생성 및 Docker 이미지 설치, 실행)
    
Java Virtual Machine
-가상머신과는 다른 목적(응용프로그램 레벨 가상화)
-JAVA 컴파일러는 CPU dependency를 가지지 않는 bytecode를 생성함
-이 파일을 Java Virtual Machine에서 실행함
-각 운영체제를 위한 Java Virtual Machine 프로그램 존재
*java가상머신은 c언어, java등 서로 다른 언어를 byte형태로 변환해 모든 언어상에서 동일하게 사용할 수 있게 해줌
