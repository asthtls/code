# 2020 02 03
# Thread(스레드) 개념

응용 프로그램 -> 응용 프로그래머  C언어, PYTHON
API/라이브러리, 플랫폼, 쉘, 컴파일러 -> 시스템 프로그래머  API사용법
OS    -> 시스템 프로그래머
HW    -> 하드웨어 개발자


THread(스레드)
-Light Weight Process 라고도 한다.
-프로세스
    --프로세스 간에는 각 프로세스의 데이터 접근이 불가    -IPC를 사용하면 데이터 접근 가능
-스레드
    --하나의 프로세스에 여러개의 스레드 생성 가능
    --스레드들은 동시에 실행 가능
    --프로세스 안에 있으므로, 프로세스의 데이터를 모두 접근 가능  -IPC를 사용하지 않아도 데이터 접근 가능


Thread는 각기 실행이 가능한 stack 존재  
-함수라는 개념. 

Multi Thread(멀티 스레드)
-소프트웨어 병행 작업 처리를 위해 Multi Thread를 사용한다.

멀티 프로세싱과 Thread
-멀티 태스킹과 멀티 프로세싱
*멀티 태스킹 = 하나의 cpu로 여러 프로세스를 실행하기위해 사람이 인식할 수 없는 시간단위로 나눠서 실행. = 여러cpu를 사용하는 것처럼 보임
*멀티 프로세싱 = 여러 cpu로 여러 프로세스를 병렬 실행. 실행속도 올라감
*멀티 프로세싱으로 하나의 프로세스를 여러 cpu에 이용 - 스레드를 여러개 만들면 가능해진다.
-최근 CPU는 멀티 코어를 가지므로, Thread를 여러 개 만들어, 멀티 코어를 활용도를 높인다.- 실행속도 높임

# 2020 02 03
# 스레드 장점


Thread 장점1
1. 사용자에 대한 응답성 향상
*예) 프로세스 1 - 스레드a = 특정 작업, 스레드b = 사용자와 커뮤니케이션 --- 이처럼 사용자에 대한 응답성 향상

장점2
2. 자원 공유 효율
-IPC기법과 같이 프로세스간 자원 공유를 위해 번거로운 작업이 필요 없음
-프로세스 안에 있으므로, 프로세스의 데이터를 모두 접근 가능

장점3
3. 작업이 분리되어 코드가 간결
-사실 작성하기 나름

스레드 단점
-스레드 중 한 스레드만 문제가 있어도, 전체 프로세스가 영향을 받는다.
-멀티 프로세스 - 프로세스1이 문제가 있으면 프로세스 1만 제거하면 완료
-멀티 스레드 - 스레드6까지중 스레드 1이 문제가 있다면 전부 에러

-스레드를 많이 생성하면, Context Switching이 많이 일어나, 성능 저하
*예:리눅스 os에서는 Thread를 Process와 같이 다룬다.
    --스레드를 많이 생성하면, 모든 스레드를 스케쥴링해야 하므로, Context Switching이 빈번할 수 밖에 없다.
    
Thread vs Process
-프로세스는 독립적, 스레드는 프로세스의 서브셋
-프로세스는 각각 독립적인 자원을 가진다, 스레드는 프로세스 자원 공유
-프로세스는 자신만의 주소영역을 가진다. 스레드는 주소영역 공유
-프로세스간에는 IPC기법으로 통신, 스레드는 필요없음

PThread
-POSIX스레드(POSIX Threads, 약어: PThread)
    --Thread관련 표준 API
    
    
    
정리
Thread개념 정리
-프로세스와 달리 스레드간 자원 공유
스레드 장점
-CPU활용도 높임
-성능 개선 가능
-응답성 향상
-자원 공유 효율(Ipc를 안써도 가능)
스레드 단점
-하나의 스레드 문제가, 프로세스 전반에 영향을 미침
-여러 스레드 생성시 성능 저하 가능


# 2020 02 03
# 동기화 이슈 예제
(Synchronization) -> 스레드 관리(디버깅x)

동기화 이슈
-동기화:작업들 사이에 실행 시기를 맞추는 것
-여러 스레드가 동일한 자원(데이터)접근시 동기화 이슈 발생
    --동일 자원을 여러 스레드가 동시 수정시, 각 스레드 결과에 영향을 줌


동기화 이슈 해결 방안
-MUtual exclusion(상호 배제)
-쓰레드는 프로세스 모든 데이터를 접근할 수 있으므로,
    --여러 스레드가 변경하는 공유 변수에 대해 Exculsive Access 필요
    --어느 한 스레드가 공유 변수를 갱신하는 동안 다른 스레드가 동시 접근하짐 못하도록 막아라
    
Mutual exclustion(상호 배제)
-임계자원(critical resource)
-임계영역(critical section)



