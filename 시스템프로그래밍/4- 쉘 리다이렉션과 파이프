# 2020 03 27
# 시스템 프로그래밍

# 리다이렉션과 파이프

STandard Stream(표준 입출력)
-command로 실행되는 프로세스는 세 가지 스트림을 가지고 있음
    --표준 입력 스트림(Standard Input Stream) -stdin
    --표준 출력 스트림(Standard Output Stream) -stdout
    --오류 출력 스트림(Standard Error Stream) - stderr
-모든 스트림은 일반적인 plain text로 console에 출력하도록 되어 있음

리다이렉션(redirection)
- 표준 스트림 흐름을 바꿔줄 수 있다.
    -- > , < 를 사용한다.
    --주로 명령어 표준 출력을 화면이 아닌 파일에 쓸 때
예) - ls > files.txt
    --ls로 출력되는 표준 출력 스트림의 방향을 files.txt로 바꿔준다.
        (files.txt에 ls로 출력되는 결과가 저장됨)

3.head <files.txt> files2.txt
-files.txt의 파일 내용이 head로 들어가서, files.txt의 앞 10라인을 출력
-head의 출력 스트림은 다시 files2.txt로 들어감
-head는 files.txt 내용을 출력하지 않고, 해당 출력 내용이 다시
files2.txt에 저장( 결과적으로 files.txt의 앞 10라인이 files2.txt에 저장)
(files2가 존재한다면 기존 내용 삭제 후에 내용 입력) - 덮어쓰기

4. 기존 파일에 추가는 >> 또는 << 사용
-ls >> files.txt
-기존에 있는 files.txt 파일 끝에, ls 출력 결과를 추가해줌


파이프(pipe) 
- 두 프로세스 사이에서 한 프로세스의 출력 스트림을 또다른 프로세스의 입력 스트림으로 사용할 때 사용

예

1. ls | grep files.txt
    -ls 명령을 통한 출력 내용이 grep 명령의 입력 스트림으로 들어감
    -grep files.txt 는 grep 명령의 입력 스트림을 검색해서 files.txt가 들어있는 입력 내용만 출력
    -따라서, ls 명령으로 해당 디렉토리/파일 중에 files.txt파일이 있는지를 출력해줌
    
*grep 예
ls | grep issue = 특정 그룹안에서 issue란 파일이 있는지 확인해준다. - 특정 파일 찾기 위한 명령어
검색 명령어
-grep [option][pattern][file or directory name]
-i = 대소문자 구분 x
-v = pattern을 포함하지 않는 라인을 출력
-n = 검색 결과의 각 행의 선두에 행 번호를 넣는다.(first line)
-l = 파일명만 출력
-c = 패턴과 일치하는 라인의 개수만 출력
-r = 하위 디렉토리까지 검색


정리
- Standard Stream
    --stdin, stdout, stderr
- redirection
    --주로 명령어 표준 출력을 화면이 아닌 파일에 쓸 때
- pipe
    --두 프로세스 사이에서 앞에 있는 프로세스의 출력 스트림을 뒤에 있는 또다른 프로세스의 입력 스트림으로 사용할 때





