# 2020 03 27
# 시스템 프로그래밍

# foreground와 background 프로세스

# 프로세스 vs 바이너리
-코드 이미지 또는 바이너리 : 실행파일
-실행 중인 프로그램: 프로세스
    --가상 메모리 및 물리 메모리 정보
    --시스템 리소스 관련 정보
    --스케쥴링 단위
    
리눅스는 다양한 프로세스 실행 환경
    -리눅스는 기본적으로 다양한 프로세스가 실행됨
        --유닉스 철학: 여러 프로그램이 서로 유기적으로 각자의 일을 수행하면서 전체 시스템이 동작하도록 하는 모델
   

foreground process/ background process
-foreground process : 쉘에서 해당 프로세스 실행을 명령한 후, 해당 프로세스 수행 종료까지 사용자가 다른 입력을 하지 못하는 프로세스
-background process : 사용자 입력과 상관없이 실행되는 프로세스
    --쉘에서 해당 프로세스 실행시, 맨 뒤에 &를 붙여줌
    --예)
        --- # find / -name '*.py' > list.txt&
        [1] 57
        ---[1]은 작업 번호, 57은 pid를 나타냄 프로세스 아이디 pid

foreground 제어 명령어
-ctrl+z = 지금까지 진행한 명령 저장 후 중단
-맨 마지막 ctrl+z로 중지된 프로세스는 bg 명령으로 background 프로세스로 실행될 수 있음
-jobs 명령어: 백그라운드로 진행 또는 중지된 상태로 있는 프로세스를 보여줌
-ctrl + c : 프로세스 작업 취소(해당 프로세스는 완전히 종료)
*운영체제 소프트웨어 인터럽트가 해당 프로세스에 보내짐 - 그래서 프로세스 제어가 가능

프로세스 상태 확인 명령어: ps
-a,-u,-l,-x,-e,-f
-데몬 프로세스 : daemon은 악마를 의미. 사용자 모르게 시스템 관리를 위해 실행되는 프로세스로 보통 시스템이 부팅될 때 자동 실행(예:ftpd, inetd등)

프로세스 중지 명령어: kill
kill 명령어
    -사용법
        -- kill % 작업 번호(job number)
        -- kill 프로세스 id(pid)
        -- 작업 강제 종료 옵션 -9
        
        